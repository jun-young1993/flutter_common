# Flutter 공통 라이브러리 패키지 개발 계획서

## 프로젝트 개요
다양한 Flutter 앱을 빠르게 개발할 수 있도록, 재활용성과 확장성을 최우선으로 설계된 공통 라이브러리 패키지입니다. 반복적으로 사용되는 UI 컴포넌트, 유틸리티, 서비스, 상태관리, 네트워크, 로컬 스토리지 등 다양한 상황에서 바로 활용 가능한 클래스를 제공합니다.

**주요 타겟**: 빠른 앱 양산이 필요한 스타트업, 에이전시, 대규모 유지보수/확장성이 중요한 팀

## 핵심 기능
- **UI 위젯 모음**: 자주 쓰는 버튼, 입력폼, 리스트, 다이얼로그, 테마 등 커스터마이즈 가능한 위젯 제공
- **상태관리 유틸리티**: flutter_bloc 기반의 상태관리 헬퍼 및 컨트롤러 패턴 제공
- **네트워크 모듈**: 공통 API 통신, 에러 처리, 인증 토큰 관리 등
- **로컬 스토리지**: SharedPreferences, secure storage 등 래퍼 및 캐싱 유틸리티
- **유틸리티 함수/클래스**: 날짜, 포맷, 밸리데이션, 변환 등 범용 함수
- **확장성/커스터마이즈**: 각 모듈은 의존성 주입 기반으로 쉽게 교체/확장 가능

## 사용자 경험
- **주요 사용자**: Flutter 개발자(개인/팀), 빠른 앱 출시가 필요한 조직
- **주요 플로우**: pubspec.yaml에 패키지 추가 → 필요한 모듈/위젯 import → 간단한 설정 후 바로 사용
- **UI/UX 고려사항**: 테마/스타일 커스터마이즈, 접근성, 다국어 지원, 문서화

## 기술 아키텍처
- **모듈 구조**: ui, state, network, storage, utils 등 폴더별 분리
- **상태관리**: flutter_bloc, freezed 기반
- **네트워크**: dio 기반 HTTP 클라이언트
- **로컬 스토리지**: shared_preferences 기반
- **테스트**: 단위/통합 테스트, 예제 프로젝트 포함

## 개발 로드맵 (우선순위별)

### 1단계: BLoC 아키텍처 개선 (최우선)
**현재 문제**: 모든 BLoC에서 동일한 코드 패턴이 반복됨
- 공통 BLoC 베이스 클래스 개발
- 공통 State 믹스인 개발
- 공통 Event 패턴 정의
- 기존 BLoC들을 새로운 베이스 클래스로 마이그레이션

### 2단계: 핵심 위젯 라이브러리 확장
**현재 상황**: 기본 구조는 있지만 내용물 부족
- 버튼 위젯 컬렉션 완성
- 입력폼 위젯 컬렉션 개발
- 리스트/그리드 위젯 개발
- 다이얼로그/모달 위젯 개발
- 로딩/에러 상태 위젯 개발

### 3단계: 유틸리티 및 헬퍼 클래스 확장
**현재 상황**: date_formatter만 존재
- 날짜/시간 유틸리티 확장
- 문자열 처리 유틸리티 개발
- 밸리데이션 유틸리티 개발
- 포맷팅 유틸리티 개발
- 변환 유틸리티 개발

### 4단계: 네트워크 모듈 고도화
**현재 상황**: dio 기본 설정만 존재
- API 클라이언트 베이스 클래스 개발
- 에러 처리 표준화
- 인증 토큰 관리 시스템
- 캐싱 전략 구현
- 네트워크 상태 관리

### 5단계: 고급 기능 및 확장
- 고급 위젯(차트, 캘린더 등) 개발
- 외부 API 연동 헬퍼
- 고급 캐싱 시스템
- 플러그인 아키텍처 구현
- 문서 자동화 시스템

## 논리적 의존성 체인
1. **기초 인프라** (BLoC 아키텍처 개선) → 모든 후속 작업의 기반
2. **핵심 기능** (위젯, 유틸리티) → 사용자가 바로 체감할 수 있는 기능
3. **고급 기능** (네트워크, 캐싱) → 복잡한 앱 개발 지원
4. **확장 기능** (고급 위젯, 플러그인) → 차별화된 기능 제공

최대한 빠르게 MVP 기능을 제공하되, 각 모듈은 독립적으로 개발/테스트 가능하도록 설계

## 위험 요소 및 대응 방안
- **기술적 난이도**: 다양한 상황을 커버하는 범용성 확보 → 예제/테스트 강화, 문서화
- **MVP 범위 선정**: 과도한 범위 확장 방지 → 필수 기능 우선, 단계별 확장
- **기존 사용자 호환성**: 1.0.12 버전 사용자들의 호환성 유지 → 점진적 개선, 마이그레이션 가이드 제공
- **유지보수/확장성**: 모듈화/의존성 주입으로 리팩토링 용이성 확보

## 부록
- Flutter 공식 가이드, flutter_bloc/freezed/dio 문서 참고
- 예제 코드/샘플 앱 포함 예정
- 한국어 문서화 우선, 영어 문서는 추후 제공 